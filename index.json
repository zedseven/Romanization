{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | Romanization.NET",
    "keywords": "API Documentation Please select a namespace or class on the left."
  },
  "api/Romanization.Chinese.HanyuPinyin.html": {
    "href": "api/Romanization.Chinese.HanyuPinyin.html",
    "title": "Class Chinese.HanyuPinyin | Romanization.NET",
    "keywords": "Class Chinese.HanyuPinyin The Hànyǔ Pīnyīn Chinese romanization system. For more information, visit: https://en.wikipedia.org/wiki/Hanyu_Pinyin Inheritance System.Object Chinese.HanyuPinyin Implements IReadingsSystem < Chinese.HanyuPinyin.ReadingTypes > IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class HanyuPinyin : object, IReadingsSystem<Chinese.HanyuPinyin.ReadingTypes>, IRomanizationSystem Constructors | Improve this Doc View Source HanyuPinyin() Instantiates a copy of the system to process romanizations. Declaration public HanyuPinyin() Properties | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs Hànyǔ Pīnyīn romanization on the given text. Uses the first (oft-most-common) reading of the character - standard Hànyǔ Pīnyīn first if available, then Hànyǔ Pīnyīn as it appeared in Xiàndài Hànyǔ Pínlǜ Cídiǎn, then as it appeared in Xiàndài Hànyǔ Cídiǎn. If more readings are required, use ProcessWithReadings(String) instead. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Note that all romanized text will be lowercase. | Improve this Doc View Source Process(String, Chinese.HanyuPinyin.ReadingTypes) Performs Hànyǔ Pīnyīn romanization on the given text. Uses the first (oft-most-common) reading of the character - standard Hànyǔ Pīnyīn first if available, then Hànyǔ Pīnyīn as it appeared in Xiàndài Hànyǔ Pínlǜ Cídiǎn, then as it appeared in Xiàndài Hànyǔ Cídiǎn. If more readings are required, use ProcessWithReadings(String, Chinese.HanyuPinyin.ReadingTypes) instead. Declaration public string Process(string text, Chinese.HanyuPinyin.ReadingTypes readingsToUse) Parameters Type Name Description System.String text The text to romanize. Chinese.HanyuPinyin.ReadingTypes readingsToUse The reading types to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Note that all romanized text will be lowercase. | Improve this Doc View Source ProcessWithReadings(String) Performs Hànyǔ Pīnyīn romanization on the given text. Returns a collection of all the characters in text , but with all readings (pronunciations) of each. Returns the following readings for characters if they exist: standard Hànyǔ Pīnyīn, Hànyǔ Pīnyīn as it appeared in Xiàndài Hànyǔ Pínlǜ Cídiǎn, and Hànyǔ Pīnyīn as it appeared in Xiàndài Hànyǔ Cídiǎn. Declaration public ReadingsString<Chinese.HanyuPinyin.ReadingTypes> ProcessWithReadings(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description ReadingsString < Chinese.HanyuPinyin.ReadingTypes > A ReadingsString<TType> with all readings for each character in text . | Improve this Doc View Source ProcessWithReadings(String, Chinese.HanyuPinyin.ReadingTypes) Performs Hànyǔ Pīnyīn romanization on the given text. Returns a collection of all the characters in text , but with all readings (pronunciations) of each. Returns the following readings for characters if in readingsToUse and they exist: standard Hànyǔ Pīnyīn, Hànyǔ Pīnyīn as it appeared in Xiàndài Hànyǔ Pínlǜ Cídiǎn, and Hànyǔ Pīnyīn as it appeared in Xiàndài Hànyǔ Cídiǎn. Declaration public ReadingsString<Chinese.HanyuPinyin.ReadingTypes> ProcessWithReadings(string text, Chinese.HanyuPinyin.ReadingTypes readingsToUse) Parameters Type Name Description System.String text The text to romanize. Chinese.HanyuPinyin.ReadingTypes readingsToUse The reading types to use. Returns Type Description ReadingsString < Chinese.HanyuPinyin.ReadingTypes > A ReadingsString<TType> with all readings for each character in text . Implements IReadingsSystem<TType> IRomanizationSystem"
  },
  "api/Romanization.Chinese.HanyuPinyin.ReadingTypes.html": {
    "href": "api/Romanization.Chinese.HanyuPinyin.ReadingTypes.html",
    "title": "Enum Chinese.HanyuPinyin.ReadingTypes | Romanization.NET",
    "keywords": "Enum Chinese.HanyuPinyin.ReadingTypes The supported reading types for Hànyǔ Pīnyīn. Namespace : Romanization Assembly : Romanization.NET.dll Syntax public enum ReadingTypes : int Fields Name Description HanyuPinlu Hànyǔ Pīnyīn as it appeared in Xiàndài Hànyǔ Pínlǜ Cídiǎn. HanyuPinyin Standard Hànyǔ Pīnyīn. XHC Hànyǔ Pīnyīn as it appeared in Xiàndài Hànyǔ Cídiǎn."
  },
  "api/Romanization.Chinese.html": {
    "href": "api/Romanization.Chinese.html",
    "title": "Class Chinese | Romanization.NET",
    "keywords": "Class Chinese The class for romanizing Chinese text. Inheritance System.Object Chinese Namespace : Romanization Assembly : Romanization.NET.dll Syntax public static class Chinese : object"
  },
  "api/Romanization.Greek.Ancient.AlaLc.html": {
    "href": "api/Romanization.Greek.Ancient.AlaLc.html",
    "title": "Class Greek.Ancient.AlaLc | Romanization.NET",
    "keywords": "Class Greek.Ancient.AlaLc The ALA-LC (American Library Association and Library of Congress) Greek romanization system. Has two separate modes - one for very old Greek ( Attic numerals , obelistic full-stops (⁚)), and one for more recent old Greek ( Greek numerals , modern-ish punctuation). If you don't know the difference, use the more recent version. For more information, visit: https://en.wikipedia.org/wiki/Romanization_of_Greek and https://www.loc.gov/catdir/cpso/romanization/greek.pdf Inheritance System.Object Greek.Ancient.AlaLc Implements IMultiInOutCultureSystem IMultiInCultureSystem IMultiOutCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class AlaLc : object, IMultiInOutCultureSystem, IMultiInCultureSystem, IMultiOutCultureSystem, IRomanizationSystem Remarks Attic numeral support is somewhat contrived. Check out ProcessNumeralsInText(String, Func<NumeralValue<Greek.Ancient.Units>, String>) for more information. Constructors | Improve this Doc View Source AlaLc(OutputNumeralType, Boolean) Instantiates a copy of the system to process romanizations. Declaration public AlaLc(OutputNumeralType outputNumeralType = OutputNumeralType.Roman, bool veryOld = false) Parameters Type Name Description OutputNumeralType outputNumeralType What kind of numeral to romanize to. Greek numerals are traditionally romanized to Roman numerals, except for when in official/government documents. System.Boolean veryOld Whether or not this system should parse as if the text is very old. In very old Greek, a different punctuation system was used and Attic numerals were used instead. Fields | Improve this Doc View Source OutputNumeralType Declaration public readonly OutputNumeralType OutputNumeralType Field Value Type Description OutputNumeralType | Improve this Doc View Source VeryOld Whether or not this system should parse as if the text is very old. In very old Greek, a different punctuation system was used and Attic numerals were used instead of newer Greek numerals. While the use of this should largely depend on the text you intend to use it with, a decent rule-of-thumb is that if Attic numerals are a possibility, this should be true. Declaration public readonly bool VeryOld Field Value Type Description System.Boolean Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs ALA-LC Greek romanization on the given text. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs ALA-LC Greek romanization on the given text. Supports providing a specific nativeCulture to process with, as long as the country code is el . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to romanize from. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. | Improve this Doc View Source Process(String, CultureInfo, CultureInfo) Performs ALA-LC Greek romanization on the given text. Supports providing a specific nativeCulture (as long as the country code is el ) to romanize from, and a romanizedCulture to romanize to. Declaration public string Process(string text, CultureInfo nativeCulture, CultureInfo romanizedCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to romanize from. CultureInfo romanizedCulture The culture to romanize to. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. | Improve this Doc View Source ProcessToCulture(String, CultureInfo) Performs ALA-LC Greek romanization on the given text. Declaration public string ProcessToCulture(string text, CultureInfo romanizedCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo romanizedCulture The culture to romanize to. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Implements IMultiInOutCultureSystem IMultiInCultureSystem IMultiOutCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Greek.Ancient.AtticNumerals.html": {
    "href": "api/Romanization.Greek.Ancient.AtticNumerals.html",
    "title": "Class Greek.Ancient.AtticNumerals | Romanization.NET",
    "keywords": "Class Greek.Ancient.AtticNumerals Attic numerals were used in Ancient Greece roughly from 7th century BCE until they were replaced by standard Greek numerals in 3rd century BCE. For more information, visit: https://en.wikipedia.org/wiki/Attic_numerals for general information and https://www.unicode.org/charts/PDF/U10140.pdf for the full Unicode codepage for many of the (likely-unrenderable) Attic characters Inheritance System.Object Greek.Ancient.AtticNumerals Implements INumeralParsingSystem < Greek.Ancient.Units > INumeralParsingSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class AtticNumerals : object, INumeralParsingSystem<Greek.Ancient.Units>, INumeralParsingSystem Constructors | Improve this Doc View Source AtticNumerals() Instantiates a copy of the system to process romanizations. Declaration public AtticNumerals() Methods | Improve this Doc View Source Process(String) Parses the numeric value of an Attic numeral, and returns the associated unit if possible. Declaration public NumeralValue<Greek.Ancient.Units> Process(string text) Parameters Type Name Description System.String text The numeral text to parse. Returns Type Description NumeralValue < Greek.Ancient.Units > A numeric value representing the value of text , with a unit if one could be found. | Improve this Doc View Source ProcessNumeralsInText(String, Func<NumeralValue<Greek.Ancient.Units>, String>) Processes all Attic numerals in the text. Declaration public string ProcessNumeralsInText(string text, Func<NumeralValue<Greek.Ancient.Units>, string> numeralProcessor) Parameters Type Name Description System.String text The text to search for numerals. Func < NumeralValue < Greek.Ancient.Units >, System.String > numeralProcessor The function to use to transform the value from Process(String) into a string to put in the text. Returns Type Description System.String A copy of text , but with all detected Attic numerals processed using numeralProcessor . Remarks Attic numeral support is somewhat contrived, as there's no real way to distinguish them from other Greek text and so in-text detection works based on presence of Unicode overbar characters. This isn't realistically something that would be seen in practice, and the special Attic characters often don't even work with the overbar combining character. Perhaps a better solution is possible, but overbars seem to stand the highest chance of having actually been in use, so that's what it looks for. If this particular function is something you need, open an issue and provide an example of what you need to romanize. For general parsing of Attic numerals, check out Process(String) . Explicit Interface Implementations | Improve this Doc View Source INumeralParsingSystem.Process(String) Declaration NumeralValue INumeralParsingSystem.Process(string text) Parameters Type Name Description System.String text Returns Type Description NumeralValue | Improve this Doc View Source INumeralParsingSystem.ProcessNumeralsInText(String, Func<NumeralValue, String>) Declaration string INumeralParsingSystem.ProcessNumeralsInText(string text, Func<NumeralValue, string> numeralProcessor) Parameters Type Name Description System.String text Func < NumeralValue , System.String > numeralProcessor Returns Type Description System.String Implements INumeralParsingSystem<TLanguageUnits> INumeralParsingSystem"
  },
  "api/Romanization.Greek.Ancient.BetaCode.html": {
    "href": "api/Romanization.Greek.Ancient.BetaCode.html",
    "title": "Class Greek.Ancient.BetaCode | Romanization.NET",
    "keywords": "Class Greek.Ancient.BetaCode The Beta Code Greek romanization system. For more information, visit: https://en.wikipedia.org/wiki/Beta_Code Inheritance System.Object Greek.Ancient.BetaCode Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class BetaCode : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source BetaCode() Instantiates a copy of the system to process romanizations. Declaration public BetaCode() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs Beta Code Greek romanization on the given text. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs Beta Code Greek romanization on the given text. Supports providing a specific nativeCulture to process with, as long as the country code is el . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to romanize from. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Greek.Ancient.GreekNumerals.html": {
    "href": "api/Romanization.Greek.Ancient.GreekNumerals.html",
    "title": "Class Greek.Ancient.GreekNumerals | Romanization.NET",
    "keywords": "Class Greek.Ancient.GreekNumerals Greek numerals were introduced around 3rd century BCE, replacing Attic numerals. They are still used today very occassionally. For more information, visit: https://en.wikipedia.org/wiki/Greek_numerals Inheritance System.Object Greek.Ancient.GreekNumerals Implements INumeralParsingSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class GreekNumerals : object, INumeralParsingSystem Constructors | Improve this Doc View Source GreekNumerals() Instantiates a copy of the system to process romanizations. Declaration public GreekNumerals() Methods | Improve this Doc View Source Process(String) Parses the numeric value of a Greek numeral. Declaration public NumeralValue Process(string text) Parameters Type Name Description System.String text The numeral text to parse. Returns Type Description NumeralValue A numeric value representing the value of text . | Improve this Doc View Source ProcessNumeralsInText(String, Func<NumeralValue, String>) Processes all Greek numerals in the text. Declaration public string ProcessNumeralsInText(string text, Func<NumeralValue, string> numeralProcessor) Parameters Type Name Description System.String text The text to search for numerals. Func < NumeralValue , System.String > numeralProcessor The function to use to transform the value from Process(String) into a string to put in the text. Returns Type Description System.String Implements INumeralParsingSystem"
  },
  "api/Romanization.Greek.Ancient.html": {
    "href": "api/Romanization.Greek.Ancient.html",
    "title": "Class Greek.Ancient | Romanization.NET",
    "keywords": "Class Greek.Ancient The class for romanizing Ancient Greek text. Inheritance System.Object Greek.Ancient Namespace : Romanization Assembly : Romanization.NET.dll Syntax public static class Ancient : object"
  },
  "api/Romanization.Greek.Ancient.Units.html": {
    "href": "api/Romanization.Greek.Ancient.Units.html",
    "title": "Enum Greek.Ancient.Units | Romanization.NET",
    "keywords": "Enum Greek.Ancient.Units Supported units for the Greek numeral systems. Namespace : Romanization Assembly : Romanization.NET.dll Syntax public enum Units : int Fields Name Description Drachma The ancient Greek currency, also used as a small unit of weight known as a dram. See https://en.wikipedia.org/wiki/Greek_drachma for more info. Mnas The plural of mina, which is a unit of weight and currency value. See https://en.wiktionary.org/wiki/mina#English for more info. Plethra An ancient Greek unit of measurement equal to roughly 30 meters. It was also used as a measure of area, with the value of approximately 30 meters squared. It was additionally used as the Greek equivalent of an acre. See https://en.wikipedia.org/wiki/Plethron for more info. Staters An acnient Greek coin used certain parts of Greece. See https://en.wikipedia.org/wiki/Stater for more info. Talents An old measurement of weight equal to about 26 kilograms, and simultaneously a unit of value of that weight in silver. See https://en.wikipedia.org/wiki/Attic_talent for more info. Time A general concept of time, but without a specific unit (days, months, years). Weight A general concept of weight/value, but without a specific unit. Most weight units from this period had inherent monetary meaning as whatever their weight was in some valuable material. Years The unit of years."
  },
  "api/Romanization.Greek.html": {
    "href": "api/Romanization.Greek.html",
    "title": "Class Greek | Romanization.NET",
    "keywords": "Class Greek The class for romanizing Greek text. Because there are separate systems for Ancient and Modern Greek, they are seperated further into Greek.Ancient and Greek.Modern classes. Inheritance System.Object Greek Namespace : Romanization Assembly : Romanization.NET.dll Syntax public static class Greek : object"
  },
  "api/Romanization.Greek.Modern.html": {
    "href": "api/Romanization.Greek.Modern.html",
    "title": "Class Greek.Modern | Romanization.NET",
    "keywords": "Class Greek.Modern The class for romanizing Modern Greek text. Inheritance System.Object Greek.Modern Namespace : Romanization Assembly : Romanization.NET.dll Syntax public static class Modern : object"
  },
  "api/Romanization.html": {
    "href": "api/Romanization.html",
    "title": "Namespace Romanization | Romanization.NET",
    "keywords": "Namespace Romanization Classes Chinese The class for romanizing Chinese text. Chinese.HanyuPinyin The Hànyǔ Pīnyīn Chinese romanization system. For more information, visit: https://en.wikipedia.org/wiki/Hanyu_Pinyin Greek The class for romanizing Greek text. Because there are separate systems for Ancient and Modern Greek, they are seperated further into Greek.Ancient and Greek.Modern classes. Greek.Ancient The class for romanizing Ancient Greek text. Greek.Ancient.AlaLc The ALA-LC (American Library Association and Library of Congress) Greek romanization system. Has two separate modes - one for very old Greek ( Attic numerals , obelistic full-stops (⁚)), and one for more recent old Greek ( Greek numerals , modern-ish punctuation). If you don't know the difference, use the more recent version. For more information, visit: https://en.wikipedia.org/wiki/Romanization_of_Greek and https://www.loc.gov/catdir/cpso/romanization/greek.pdf Greek.Ancient.AtticNumerals Attic numerals were used in Ancient Greece roughly from 7th century BCE until they were replaced by standard Greek numerals in 3rd century BCE. For more information, visit: https://en.wikipedia.org/wiki/Attic_numerals for general information and https://www.unicode.org/charts/PDF/U10140.pdf for the full Unicode codepage for many of the (likely-unrenderable) Attic characters Greek.Ancient.BetaCode The Beta Code Greek romanization system. For more information, visit: https://en.wikipedia.org/wiki/Beta_Code Greek.Ancient.GreekNumerals Greek numerals were introduced around 3rd century BCE, replacing Attic numerals. They are still used today very occassionally. For more information, visit: https://en.wikipedia.org/wiki/Greek_numerals Greek.Modern The class for romanizing Modern Greek text. IrrelevantCultureException Thrown when the culture passed to Process(String, CultureInfo) is deemed irrelevant to the language. Japanese The class for romanizing Japanese text. (Rōmaji) Japanese.KanjiReadings A system for romanizing Kanji characters. For more information, visit: https://en.wikipedia.org/wiki/Kanji Japanese.ModifiedHepburn The Modified Hepburn Japanese romanization system. For more information, visit: https://en.wikipedia.org/wiki/Hepburn_romanization Korean The class for romanizing Korean text. (Romaja) Korean.HanjaReadings A system for converting Hanja to Hangeul characters, or for romanizing Hanja directly. For more information, visit: https://en.wikipedia.org/wiki/Hanja Korean.RevisedRomanization The Revised Romanization of Korean system. For more information, visit: https://en.wikipedia.org/wiki/Revised_Romanization_of_Korean Reading<TType> A reading (pronunciation) of a character. ReadingCharacter<TType> A character with all possible readings (pronunciations). ReadingsString<TType> A string of characters with all possible readings (pronunciations) for each character. Russian The class for romanizing Russian text. The reason for the abundance of systems is because there is no single, international, modern standard like there is for many other languages. Note that dictionary/learning-material Russian can include acute diacritics for marking stress. These are ignored by all systems here, and the diacritic will remain on the romanized version. See https://en.wikipedia.org/wiki/Russian_alphabet#Diacritics for more info. Russian.AlaLc The ALA-LC (American Library Association and Library of Congress) Russian romanization system. For more information, visit: https://en.wikipedia.org/wiki/ALA-LC_romanization_for_Russian and https://www.loc.gov/catdir/cpso/romanization/russian.pdf Russian.BgnPcgn The BGN/PCGN system of romanization for Russian. It was developed by the Unites States Board on Geographic Names and the Permanent Committee on Geographical Names for British Official Use, and is designed to be easier for anglophones to pronounce. For more information, visit: https://en.wikipedia.org/wiki/BGN/PCGN_romanization_of_Russian Russian.Bs29791958 The British Standard 2979:1958 system of romanization for Russian. It is the main system of Oxford University Press, and was used by the British Library up until 1975. ALA-LC is now used instead. For more information, visit: https://en.wikipedia.org/wiki/Romanization_of_Russian#British_Standard Russian.Gost16876711 The GOST 16876-71(1) (UNGEGN) romanization system of Russian. This system was recommended by the United Nations Group of Experts on Geographical Names. This is Table 1 of the GOST 16876-71 system with 1 Cyrillic to 1 Latin char, with diacritics. For more information, visit: https://en.wikipedia.org/wiki/GOST_16876-71 Russian.Gost16876712 The GOST 16876-71(2) romanization system of Russian. This is Table 2 of the GOST 16876-71 system with 1 Cyrillic to potentially many Latin chars, without diacritics. For more information, visit: https://en.wikipedia.org/wiki/GOST_16876-71 Russian.Gost7792000A The GOST 7.79-2000(A) romanization system of Russian. This is System A of the GOST 7.79-2000 system with 1 Cyrillic to 1 Latin char, with diacritics. Identical to ISO 9:1995 (different to ISO/R 9:1968). For more information, visit: https://en.wikipedia.org/wiki/GOST_7.79-2000 Russian.Gost7792000B The GOST 7.79-2000(B) romanization system of Russian. This is System B of the GOST 7.79-2000 system with 1 Cyrillic to potentially many Latin chars, without diacritics. For more information, visit: https://en.wikipedia.org/wiki/GOST_7.79-2000 Russian.Icao9303 The system from ICAO Doc 9303 \"Machine Readable Travel Documents, Part 3\". This is the standard for modern Russian passports, in 2021. For more information, visit: https://www.icao.int/publications/Documents/9303_p3_cons_en.pdf Russian.IsoR9 The ISO Recommendation No. 9 (ISO/R 9:1968) system of romanization, specialized for Russian. This transliteration table is designed to cover Bulgarian, Russian, Belarusian, Ukrainian, Serbo-Croatian and Macedonian in general, with regional specializations for certain languages. This is largely superceded by ISO 9 (GOST 7.79-2000(A)). For more information, visit: https://en.wikipedia.org/wiki/ISO_9#ISO/R_9 Russian.RoadSigns The general road sign romanization system of Russian. This consists of Russian GOST R 52290-2004 (tables Г.4, Г.5) as well as GOST 10807-78 (tables 17, 18), historically. For more information, visit: https://en.wikipedia.org/wiki/Romanization_of_Russian#Street_and_road_signs Russian.Scholarly The International Scholarly System of romanization for Russian. For more information, visit: https://en.wikipedia.org/wiki/Scientific_transliteration_of_Cyrillic Structs NumeralValue A numeral value with no associated unit. NumeralValue<TLanguageUnits> A numeral value with an associated unit if there is one. Some numeral systems have special characters that indicate what the number is for, which is what the Unit field is for. Interfaces IMultiInCultureSystem A system used to romanize a language where there are multiple options to use for the native culture. IMultiInOutCultureSystem An extended version of IMultiInCultureSystem that supports providing a culture to romanize to, as well as from. the reason this is separate from IMultiInCultureSystem is because many systems don't have to do anything culture-specific when romanizing to a culture, but some do. IMultiOutCultureSystem A system used to romanize a language where there are culture-specific ways to output the romanized text. For example, numeral-parsing systems that can output numbers in Arabic format pay attention to comma/period use in the culture they're romanizing for. (North America uses a period for the decimal place, whereas Europe uses a comma) INumeralParsingSystem Not actual romanization. This is a system exclusively for parsing other numeral systems (Greek numerals, for instance). INumeralParsingSystem<TLanguageUnits> Not actual romanization. This is a system exclusively for parsing other numeral systems (Greek numerals, for instance). IReadingsSystem<TType> A system used to romanize a language with multiple readings (pronunciations) per character. IRomanizationSystem A system used to romanize a language. Enums Chinese.HanyuPinyin.ReadingTypes The supported reading types for Hànyǔ Pīnyīn. Greek.Ancient.Units Supported units for the Greek numeral systems. Japanese.KanjiReadings.ReadingTypes The supported reading types for Kanji. Korean.HanjaReadings.ReadingTypes The supported reading types for Hanja. In this case, Hangeul is the only supported one. OutputNumeralType The type of output numeral parsed numbers should be put into. For instance, Greek numerals are traditionally romanized as Roman numerals except for when in official/government documents. SystemType The type of a system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods"
  },
  "api/Romanization.IMultiInCultureSystem.html": {
    "href": "api/Romanization.IMultiInCultureSystem.html",
    "title": "Interface IMultiInCultureSystem | Romanization.NET",
    "keywords": "Interface IMultiInCultureSystem A system used to romanize a language where there are multiple options to use for the native culture. Inherited Members IRomanizationSystem.Type IRomanizationSystem.Process(String) Namespace : Romanization Assembly : Romanization.NET.dll Syntax public interface IMultiInCultureSystem : IRomanizationSystem Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo Methods | Improve this Doc View Source Process(String, CultureInfo) The system-specific function that romanizes text according to the system's rules, using the provided nativeCulture for processing of native text, and for processing of romanized text. Note that use of non-relevant cultures WILL lead to unexpected behaviour. If you don't know which culture to use, use the standard Process(String) instead. Declaration string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to romanize from. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched."
  },
  "api/Romanization.IMultiInOutCultureSystem.html": {
    "href": "api/Romanization.IMultiInOutCultureSystem.html",
    "title": "Interface IMultiInOutCultureSystem | Romanization.NET",
    "keywords": "Interface IMultiInOutCultureSystem An extended version of IMultiInCultureSystem that supports providing a culture to romanize to, as well as from. the reason this is separate from IMultiInCultureSystem is because many systems don't have to do anything culture-specific when romanizing to a culture, but some do. Inherited Members IMultiInCultureSystem.DefaultCulture IMultiInCultureSystem.Process(String, CultureInfo) IMultiOutCultureSystem.ProcessToCulture(String, CultureInfo) IRomanizationSystem.Type IRomanizationSystem.Process(String) Namespace : Romanization Assembly : Romanization.NET.dll Syntax public interface IMultiInOutCultureSystem : IMultiInCultureSystem, IMultiOutCultureSystem, IRomanizationSystem Methods | Improve this Doc View Source Process(String, CultureInfo, CultureInfo) The system-specific function that romanizes text according to the system's rules, using the provided nativeCulture for processing of native text, and romanizedCulture for processing of romanized text. Note that use of non-relevant cultures WILL lead to unexpected behaviour. If you don't know which cultures to use, use the standard Process(String) instead. Declaration string Process(string text, CultureInfo nativeCulture, CultureInfo romanizedCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to romanize from. CultureInfo romanizedCulture The culture to romanize to. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched."
  },
  "api/Romanization.IMultiOutCultureSystem.html": {
    "href": "api/Romanization.IMultiOutCultureSystem.html",
    "title": "Interface IMultiOutCultureSystem | Romanization.NET",
    "keywords": "Interface IMultiOutCultureSystem A system used to romanize a language where there are culture-specific ways to output the romanized text. For example, numeral-parsing systems that can output numbers in Arabic format pay attention to comma/period use in the culture they're romanizing for. (North America uses a period for the decimal place, whereas Europe uses a comma) Inherited Members IRomanizationSystem.Type IRomanizationSystem.Process(String) Namespace : Romanization Assembly : Romanization.NET.dll Syntax public interface IMultiOutCultureSystem : IRomanizationSystem Methods | Improve this Doc View Source ProcessToCulture(String, CultureInfo) The system-specific function that romanizes text according to the system's rules, using the culture for the language, and romanizedCulture for processing of romanized text. Declaration string ProcessToCulture(string text, CultureInfo romanizedCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo romanizedCulture The culture to romanize to. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched."
  },
  "api/Romanization.Internal.CaptureCountMismatchException.html": {
    "href": "api/Romanization.Internal.CaptureCountMismatchException.html",
    "title": "Class CaptureCountMismatchException | Romanization.NET",
    "keywords": "Class CaptureCountMismatchException Inheritance System.Object CaptureCountMismatchException Namespace : Romanization.Internal Assembly : Romanization.NET.dll Syntax public class CaptureCountMismatchException : ArgumentException"
  },
  "api/Romanization.Internal.html": {
    "href": "api/Romanization.Internal.html",
    "title": "Namespace Romanization.Internal | Romanization.NET",
    "keywords": "Namespace Romanization.Internal Classes CaptureCountMismatchException"
  },
  "api/Romanization.INumeralParsingSystem.html": {
    "href": "api/Romanization.INumeralParsingSystem.html",
    "title": "Interface INumeralParsingSystem | Romanization.NET",
    "keywords": "Interface INumeralParsingSystem Not actual romanization. This is a system exclusively for parsing other numeral systems (Greek numerals, for instance). Namespace : Romanization Assembly : Romanization.NET.dll Syntax public interface INumeralParsingSystem Methods | Improve this Doc View Source Process(String) The system-specific function that determines the numeric value of a numeral using the system. Declaration NumeralValue Process(string text) Parameters Type Name Description System.String text The numeral text to parse. Returns Type Description NumeralValue A numeric value representing the value of text , with a unit if one could be found. | Improve this Doc View Source ProcessNumeralsInText(String, Func<NumeralValue, String>) Processes the given text, parsing any numerals with Process(String) then replacing them with the result of numeralProcessor run on their values. Declaration string ProcessNumeralsInText(string text, Func<NumeralValue, string> numeralProcessor) Parameters Type Name Description System.String text The text to process. Func < NumeralValue , System.String > numeralProcessor The function that converts parsed numeric value into a string. Returns Type Description System.String A new copy of text with all numerals found within replaced."
  },
  "api/Romanization.INumeralParsingSystem-1.html": {
    "href": "api/Romanization.INumeralParsingSystem-1.html",
    "title": "Interface INumeralParsingSystem<TLanguageUnits> | Romanization.NET",
    "keywords": "Interface INumeralParsingSystem<TLanguageUnits> Not actual romanization. This is a system exclusively for parsing other numeral systems (Greek numerals, for instance). Inherited Members INumeralParsingSystem.ProcessNumeralsInText(String, Func<NumeralValue, String>) Namespace : Romanization Assembly : Romanization.NET.dll Syntax public interface INumeralParsingSystem<TLanguageUnits> : INumeralParsingSystem where TLanguageUnits : struct Type Parameters Name Description TLanguageUnits Methods | Improve this Doc View Source Process(String) The system-specific function that determines the numeric value of a numeral using the system. Declaration NumeralValue<TLanguageUnits> Process(string text) Parameters Type Name Description System.String text The numeral text to parse. Returns Type Description NumeralValue <TLanguageUnits> A numeric value representing the value of text , with a unit if one could be found. | Improve this Doc View Source ProcessNumeralsInText(String, Func<NumeralValue<TLanguageUnits>, String>) Processes the given text, parsing any numerals with Process(String) then replacing them with the result of numeralProcessor run on their values. Declaration string ProcessNumeralsInText(string text, Func<NumeralValue<TLanguageUnits>, string> numeralProcessor) Parameters Type Name Description System.String text The text to process. Func < NumeralValue <TLanguageUnits>, System.String > numeralProcessor The function that converts parsed numeric value (potentially with units) into a string. Returns Type Description System.String A new copy of text with all numerals found within replaced."
  },
  "api/Romanization.IReadingsSystem-1.html": {
    "href": "api/Romanization.IReadingsSystem-1.html",
    "title": "Interface IReadingsSystem<TType> | Romanization.NET",
    "keywords": "Interface IReadingsSystem<TType> A system used to romanize a language with multiple readings (pronunciations) per character. Inherited Members IRomanizationSystem.Type IRomanizationSystem.Process(String) Namespace : Romanization Assembly : Romanization.NET.dll Syntax public interface IReadingsSystem<TType> : IRomanizationSystem where TType : Enum Type Parameters Name Description TType The types of reading the system uses. Methods | Improve this Doc View Source ProcessWithReadings(String) The system-specific function that romanizes text in a language with multiple readings (pronunciations) per character. Declaration ReadingsString<TType> ProcessWithReadings(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description ReadingsString <TType> A ReadingsString<TType> with all readings for each character in text ."
  },
  "api/Romanization.IRomanizationSystem.html": {
    "href": "api/Romanization.IRomanizationSystem.html",
    "title": "Interface IRomanizationSystem | Romanization.NET",
    "keywords": "Interface IRomanizationSystem A system used to romanize a language. Namespace : Romanization Assembly : Romanization.NET.dll Syntax public interface IRomanizationSystem Properties | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) The system-specific function that romanizes text according to the system's rules. Declaration string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched."
  },
  "api/Romanization.IrrelevantCultureException.html": {
    "href": "api/Romanization.IrrelevantCultureException.html",
    "title": "Class IrrelevantCultureException | Romanization.NET",
    "keywords": "Class IrrelevantCultureException Thrown when the culture passed to Process(String, CultureInfo) is deemed irrelevant to the language. Inheritance System.Object IrrelevantCultureException Namespace : Romanization Assembly : Romanization.NET.dll Syntax public class IrrelevantCultureException : ArgumentException"
  },
  "api/Romanization.Japanese.html": {
    "href": "api/Romanization.Japanese.html",
    "title": "Class Japanese | Romanization.NET",
    "keywords": "Class Japanese The class for romanizing Japanese text. (Rōmaji) Inheritance System.Object Japanese Namespace : Romanization Assembly : Romanization.NET.dll Syntax public static class Japanese : object"
  },
  "api/Romanization.Japanese.KanjiReadings.html": {
    "href": "api/Romanization.Japanese.KanjiReadings.html",
    "title": "Class Japanese.KanjiReadings | Romanization.NET",
    "keywords": "Class Japanese.KanjiReadings A system for romanizing Kanji characters. For more information, visit: https://en.wikipedia.org/wiki/Kanji Inheritance System.Object Japanese.KanjiReadings Implements IReadingsSystem < Japanese.KanjiReadings.ReadingTypes > IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class KanjiReadings : object, IReadingsSystem<Japanese.KanjiReadings.ReadingTypes>, IRomanizationSystem Constructors | Improve this Doc View Source KanjiReadings() Instantiates a copy of the system to process romanizations. Declaration public KanjiReadings() Properties | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs romanization of all Kanji in the given text. Uses the first reading of the character - Kun'yomi first, if available, then On'yomi. If more readings are required, use ProcessWithReadings(String) instead. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Note that all romanized text will be lowercase. | Improve this Doc View Source Process(String, Japanese.KanjiReadings.ReadingTypes) Performs romanization of all Kanji in the given text. Uses the first reading of the character - Kun'yomi first, if requested and available, then On'yomi if requested and available. If more readings are required, use ProcessWithReadings(String, Japanese.KanjiReadings.ReadingTypes) instead. Declaration public string Process(string text, Japanese.KanjiReadings.ReadingTypes readingsToUse) Parameters Type Name Description System.String text The text to romanize. Japanese.KanjiReadings.ReadingTypes readingsToUse The reading types to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Note that all romanized text will be lowercase. | Improve this Doc View Source ProcessWithKana(String, IRomanizationSystem) Performs romanization of all Kanji in the given text, after using system to handle the kana. system defaults to Japanese.ModifiedHepburn if left as null. See the documentation for Process(String) and the chosen system for more implementation details. Declaration public string ProcessWithKana(string text, IRomanizationSystem system = null) Parameters Type Name Description System.String text The text to romanize. IRomanizationSystem system The system to romanize the kana in text before the Kanji are touched. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Note that all romanized text will be lowercase. | Improve this Doc View Source ProcessWithReadings(String) Performs romanization of all Kanji in the given text. Returns a collection of all the characters in text , but with all readings (pronunciations) of each. Returns the following readings for characters if they exist: Kun'yomi and On'yomi. Declaration public ReadingsString<Japanese.KanjiReadings.ReadingTypes> ProcessWithReadings(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description ReadingsString < Japanese.KanjiReadings.ReadingTypes > A ReadingsString<TType> with all readings for each character in text . | Improve this Doc View Source ProcessWithReadings(String, Japanese.KanjiReadings.ReadingTypes) Performs romanization of all Kanji in the given text. Returns a collection of all the characters in text , but with all readings (pronunciations) of each. Can return the following readings for characters if in readingsToUse and they exist: Kun'yomi and On'yomi. Declaration public ReadingsString<Japanese.KanjiReadings.ReadingTypes> ProcessWithReadings(string text, Japanese.KanjiReadings.ReadingTypes readingsToUse) Parameters Type Name Description System.String text The text to romanize. Japanese.KanjiReadings.ReadingTypes readingsToUse The reading types to use. Returns Type Description ReadingsString < Japanese.KanjiReadings.ReadingTypes > A ReadingsString<TType> with all readings for each character in text . Implements IReadingsSystem<TType> IRomanizationSystem"
  },
  "api/Romanization.Japanese.KanjiReadings.ReadingTypes.html": {
    "href": "api/Romanization.Japanese.KanjiReadings.ReadingTypes.html",
    "title": "Enum Japanese.KanjiReadings.ReadingTypes | Romanization.NET",
    "keywords": "Enum Japanese.KanjiReadings.ReadingTypes The supported reading types for Kanji. Namespace : Romanization Assembly : Romanization.NET.dll Syntax public enum ReadingTypes : int Fields Name Description Kunyomi Kun'yomi, the Japanese-native reading. Often referred to as just Kun. Onyomi On'yomi, the Sino-Japanese reading. Often referred to as just On."
  },
  "api/Romanization.Japanese.ModifiedHepburn.html": {
    "href": "api/Romanization.Japanese.ModifiedHepburn.html",
    "title": "Class Japanese.ModifiedHepburn | Romanization.NET",
    "keywords": "Class Japanese.ModifiedHepburn The Modified Hepburn Japanese romanization system. For more information, visit: https://en.wikipedia.org/wiki/Hepburn_romanization Inheritance System.Object Japanese.ModifiedHepburn Implements IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class ModifiedHepburn : object, IRomanizationSystem Constructors | Improve this Doc View Source ModifiedHepburn() Instantiates a copy of the system to process romanizations. Declaration public ModifiedHepburn() Properties | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs Modified Hepburn romanization on the given text. Note this supports Hiragana and Katakana, but not Kanji. Due to limits of machine romanization, certain details of the system are left out - namely vowel combinations, as the rules for combining vowels depend on whether or not the vowels share a morpheme (something not known to the program). Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Note that all romanized text will be lowercase. Implements IRomanizationSystem"
  },
  "api/Romanization.Korean.HanjaReadings.html": {
    "href": "api/Romanization.Korean.HanjaReadings.html",
    "title": "Class Korean.HanjaReadings | Romanization.NET",
    "keywords": "Class Korean.HanjaReadings A system for converting Hanja to Hangeul characters, or for romanizing Hanja directly. For more information, visit: https://en.wikipedia.org/wiki/Hanja Inheritance System.Object Korean.HanjaReadings Implements IReadingsSystem < Korean.HanjaReadings.ReadingTypes > IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class HanjaReadings : object, IReadingsSystem<Korean.HanjaReadings.ReadingTypes>, IRomanizationSystem Constructors | Improve this Doc View Source HanjaReadings() Instantiates a copy of the system to process romanizations. Declaration public HanjaReadings() Properties | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs romanization of all Hanja in the given text, first to Hangeul, then to proper romanization according to the Revised Romanization of Korea system. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Note that all romanized text will be lowercase. | Improve this Doc View Source Process(String, IRomanizationSystem) Performs romanization of all Hanja in the given text, first to Hangeul, then to proper romanization according to system . Declaration public string Process(string text, IRomanizationSystem system) Parameters Type Name Description System.String text The text to romanize. IRomanizationSystem system The romanization system to use for the Hangeul characters the Hanja is converted to. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Note that all romanized text will be lowercase. | Improve this Doc View Source ProcessToHangeul(String) Converts all Hanja in the given text to their first Hangeul character in the list of possible readings. Note that this will not yield a romanized string, but rather a standard Korean one. See Process(String, IRomanizationSystem) for a romanized output. Declaration public string ProcessToHangeul(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A version of the text with all Hanja characters replaced with their first Hangeul readings. | Improve this Doc View Source ProcessWithReadings(String) Performs romanization of all Hanja in the given text. Returns a collection of all the characters in text , but with all readings (pronunciations) of each in Hangeul (the Korean alphabet). Declaration public ReadingsString<Korean.HanjaReadings.ReadingTypes> ProcessWithReadings(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description ReadingsString < Korean.HanjaReadings.ReadingTypes > A ReadingsString<TType> with all readings for each character in text . Implements IReadingsSystem<TType> IRomanizationSystem"
  },
  "api/Romanization.Korean.HanjaReadings.ReadingTypes.html": {
    "href": "api/Romanization.Korean.HanjaReadings.ReadingTypes.html",
    "title": "Enum Korean.HanjaReadings.ReadingTypes | Romanization.NET",
    "keywords": "Enum Korean.HanjaReadings.ReadingTypes The supported reading types for Hanja. In this case, Hangeul is the only supported one. Namespace : Romanization Assembly : Romanization.NET.dll Syntax public enum ReadingTypes : int Fields Name Description Hangeul Hangeul, the Korean alphabet."
  },
  "api/Romanization.Korean.html": {
    "href": "api/Romanization.Korean.html",
    "title": "Class Korean | Romanization.NET",
    "keywords": "Class Korean The class for romanizing Korean text. (Romaja) Inheritance System.Object Korean Namespace : Romanization Assembly : Romanization.NET.dll Syntax public static class Korean : object"
  },
  "api/Romanization.Korean.RevisedRomanization.html": {
    "href": "api/Romanization.Korean.RevisedRomanization.html",
    "title": "Class Korean.RevisedRomanization | Romanization.NET",
    "keywords": "Class Korean.RevisedRomanization The Revised Romanization of Korean system. For more information, visit: https://en.wikipedia.org/wiki/Revised_Romanization_of_Korean Inheritance System.Object Korean.RevisedRomanization Implements IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class RevisedRomanization : object, IRomanizationSystem Constructors | Improve this Doc View Source RevisedRomanization() Instantiates a copy of the system to process romanizations. Declaration public RevisedRomanization() Fields | Improve this Doc View Source HyphenateSyllables Whether to insert a hyphen ('-') between syllables in non-required spots. This can help to distinguish between ambiguous words: 가을 -> ga-eul (fall; autumn) vs. 개울 -> gae-ul (stream). Declaration public readonly bool HyphenateSyllables Field Value Type Description System.Boolean Properties | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs romanization on the given text, according to the Revised Romanization of Korean system. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Note that all romanized text will be lowercase. | Improve this Doc View Source Process(String, Boolean, Boolean, Boolean) Performs romanization on the given text, according to the Revised Romanization of Korean system. Declaration public string Process(string text, bool givenName, bool noun = false, bool hyphenateSyllables = false) Parameters Type Name Description System.String text The text to romanize. System.Boolean givenName Whether or not the text to romanize is a given name, since Korean names are often romanized without consideration for special Jamo combinations. System.Boolean noun Whether or not the text to romanize is a noun, since there is a distinction between whether or not aspiration is reflected based on nouns. System.Boolean hyphenateSyllables Whether to insert a hyphen ('-') between syllables in non-required spots. This can help to distinguish between ambiguous words: 가을 -> ga-eul (fall; autumn) vs. 개울 -> gae-ul (stream). Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Note that all romanized text will be lowercase. Implements IRomanizationSystem"
  },
  "api/Romanization.NumeralValue.html": {
    "href": "api/Romanization.NumeralValue.html",
    "title": "Struct NumeralValue | Romanization.NET",
    "keywords": "Struct NumeralValue A numeral value with no associated unit. Implements IEquatable < NumeralValue > IComparable < NumeralValue > Namespace : Romanization Assembly : Romanization.NET.dll Syntax public struct NumeralValue : IEquatable<NumeralValue>, IComparable<NumeralValue> Constructors | Improve this Doc View Source NumeralValue(Decimal) Constructs a new NumeralValue<TLanguageUnits> with a value . Declaration public NumeralValue(decimal value) Parameters Type Name Description System.Decimal value The value. Fields | Improve this Doc View Source Value The numeric value. Declaration public readonly decimal Value Field Value Type Description System.Decimal Methods | Improve this Doc View Source CompareTo(NumeralValue) Declaration public int CompareTo(NumeralValue other) Parameters Type Name Description NumeralValue other Returns Type Description System.Int32 | Improve this Doc View Source Equals(NumeralValue) Declaration public bool Equals(NumeralValue other) Parameters Type Name Description NumeralValue other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Equality(NumeralValue, NumeralValue) Checks for equality between two NumeralValue instances. Declaration public static bool operator ==(NumeralValue left, NumeralValue right) Parameters Type Name Description NumeralValue left The left side of the operator. NumeralValue right The right side of the operator. Returns Type Description System.Boolean Whether left and right are value-equal. | Improve this Doc View Source Inequality(NumeralValue, NumeralValue) Checks for inequality between two NumeralValue instances. Declaration public static bool operator !=(NumeralValue left, NumeralValue right) Parameters Type Name Description NumeralValue left The left side of the operator. NumeralValue right The right side of the operator. Returns Type Description System.Boolean Whether left and right are not value-equal. Implements IEquatable<> IComparable<>"
  },
  "api/Romanization.NumeralValue-1.html": {
    "href": "api/Romanization.NumeralValue-1.html",
    "title": "Struct NumeralValue<TLanguageUnits> | Romanization.NET",
    "keywords": "Struct NumeralValue<TLanguageUnits> A numeral value with an associated unit if there is one. Some numeral systems have special characters that indicate what the number is for, which is what the Unit field is for. Implements IEquatable < NumeralValue <TLanguageUnits>> IComparable < NumeralValue <TLanguageUnits>> Namespace : Romanization Assembly : Romanization.NET.dll Syntax public struct NumeralValue<TLanguageUnits> : IEquatable<NumeralValue<TLanguageUnits>>, IComparable<NumeralValue<TLanguageUnits>> where TLanguageUnits : struct Type Parameters Name Description TLanguageUnits Constructors | Improve this Doc View Source NumeralValue(Decimal, Nullable<TLanguageUnits>) Constructs a new NumeralValue<TLanguageUnits> with a value and unit . Declaration public NumeralValue(decimal value, TLanguageUnits? unit = null) Parameters Type Name Description System.Decimal value The value. System.Nullable <TLanguageUnits> unit The unit the value is in, if any. Fields | Improve this Doc View Source Unit The unit of the value, if known. Some numeral systems have symbols built in that convey the unit the number is of. Declaration public readonly TLanguageUnits? Unit Field Value Type Description System.Nullable <TLanguageUnits> | Improve this Doc View Source Value The numeric value. Declaration public readonly decimal Value Field Value Type Description System.Decimal Methods | Improve this Doc View Source CompareTo(NumeralValue<TLanguageUnits>) Declaration public int CompareTo(NumeralValue<TLanguageUnits> other) Parameters Type Name Description NumeralValue <TLanguageUnits> other Returns Type Description System.Int32 | Improve this Doc View Source Equals(NumeralValue<TLanguageUnits>) Declaration public bool Equals(NumeralValue<TLanguageUnits> other) Parameters Type Name Description NumeralValue <TLanguageUnits> other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Operators | Improve this Doc View Source Equality(NumeralValue<TLanguageUnits>, NumeralValue<TLanguageUnits>) Checks for equality between two NumeralValue<TLanguageUnits> instances. Declaration public static bool operator ==(NumeralValue<TLanguageUnits> left, NumeralValue<TLanguageUnits> right) Parameters Type Name Description NumeralValue <TLanguageUnits> left The left side of the operator. NumeralValue <TLanguageUnits> right The right side of the operator. Returns Type Description System.Boolean Whether left and right are value-equal. | Improve this Doc View Source Inequality(NumeralValue<TLanguageUnits>, NumeralValue<TLanguageUnits>) Checks for inequality between two NumeralValue<TLanguageUnits> instances. Declaration public static bool operator !=(NumeralValue<TLanguageUnits> left, NumeralValue<TLanguageUnits> right) Parameters Type Name Description NumeralValue <TLanguageUnits> left The left side of the operator. NumeralValue <TLanguageUnits> right The right side of the operator. Returns Type Description System.Boolean Whether left and right are not value-equal. Implements IEquatable<> IComparable<>"
  },
  "api/Romanization.OutputNumeralType.html": {
    "href": "api/Romanization.OutputNumeralType.html",
    "title": "Enum OutputNumeralType | Romanization.NET",
    "keywords": "Enum OutputNumeralType The type of output numeral parsed numbers should be put into. For instance, Greek numerals are traditionally romanized as Roman numerals except for when in official/government documents. Namespace : Romanization Assembly : Romanization.NET.dll Syntax public enum OutputNumeralType : int Fields Name Description Arabic The numeral system of much of the world. Example: 267.5 Roman The numeral system of Rome, still often used today for names etc. Example: CCLXVIIS"
  },
  "api/Romanization.Reading-1.html": {
    "href": "api/Romanization.Reading-1.html",
    "title": "Class Reading<TType> | Romanization.NET",
    "keywords": "Class Reading<TType> A reading (pronunciation) of a character. Inheritance System.Object Reading<TType> Namespace : Romanization Assembly : Romanization.NET.dll Syntax public class Reading<TType> : object where TType : Enum Type Parameters Name Description TType The reading type enum to use, which contains all supported readings for a given language or system. For example, Japanese.KanjiReadings.ReadingTypes . Fields | Improve this Doc View Source Type The type of reading it is. For example, it could be Kunyomi . Declaration public readonly TType Type Field Value Type Description TType | Improve this Doc View Source Value The reading itself - a romanized string representing how a character should be pronounced. Declaration public readonly string Value Field Value Type Description System.String"
  },
  "api/Romanization.ReadingCharacter-1.html": {
    "href": "api/Romanization.ReadingCharacter-1.html",
    "title": "Class ReadingCharacter<TType> | Romanization.NET",
    "keywords": "Class ReadingCharacter<TType> A character with all possible readings (pronunciations). Inheritance System.Object ReadingCharacter<TType> Namespace : Romanization Assembly : Romanization.NET.dll Syntax public class ReadingCharacter<TType> : object where TType : Enum Type Parameters Name Description TType The reading type enum to use, which contains all supported readings for a given language or system. For example, Japanese.KanjiReadings.ReadingTypes . Fields | Improve this Doc View Source Character The actual character value. Note that this is not necessarily one char in length - some Hànzì characters go outside the Basic Multilingual Plane (BMP), and as such take up 32 bits (two 16-bit chars). Declaration public readonly string Character Field Value Type Description System.String | Improve this Doc View Source Readings The collection of known readings for the character, in order as specified in the function used to generate this object. Declaration public readonly Reading<TType>[] Readings Field Value Type Description Reading <TType>[] Methods | Improve this Doc View Source FlattenReadings() Returns a string starting and ending with square brackets, containing all readings in the order they appear in Readings . If the character has no known readings, the character itself is returned instead. Example: [shuài lǜ lüe l̈ù] Note this does not output the source of each reading. Declaration public string FlattenReadings() Returns Type Description System.String A string representation of all readings of the character, or the character itself if there are none. | Improve this Doc View Source ToString() Returns a string that represents the current object. The format is: '<char>' [<readings>] Declaration public override string ToString() Returns Type Description System.String A string with the character and all known readings."
  },
  "api/Romanization.ReadingsString-1.html": {
    "href": "api/Romanization.ReadingsString-1.html",
    "title": "Class ReadingsString<TType> | Romanization.NET",
    "keywords": "Class ReadingsString<TType> A string of characters with all possible readings (pronunciations) for each character. Inheritance System.Object ReadingsString<TType> Namespace : Romanization Assembly : Romanization.NET.dll Syntax public class ReadingsString<TType> : object where TType : Enum Type Parameters Name Description TType The reading type enum to use, which contains all supported readings for a given language or system. For example, Japanese.KanjiReadings.ReadingTypes . Fields | Improve this Doc View Source Characters The characters of the string. Each one stores both the character itself (not necessarily equivalent to a char, as some Hànzì characters are double-wide), and all known readings (pronunciations). Declaration public readonly ReadingCharacter<TType>[] Characters Field Value Type Description ReadingCharacter <TType>[] Methods | Improve this Doc View Source ToString() Returns a string that displays all readings of each character. For characters with 0 readings, they are displayed simply as themselves. For characters with 1 reading, they are displayed as their only reading. For characters with more than 1 reading, they are displayed as a space-delimited list of all readings in order, within square brackets. Example: \"xiàndài [hàn tān][yǔ yù] [pín bīn][shuài lǜ lüe l̈ù] cí[diǎn tiǎn].\" Note that this does not display the source of each reading. Declaration public override string ToString() Returns Type Description System.String A string with all known readings of each character."
  },
  "api/Romanization.Russian.AlaLc.html": {
    "href": "api/Romanization.Russian.AlaLc.html",
    "title": "Class Russian.AlaLc | Romanization.NET",
    "keywords": "Class Russian.AlaLc The ALA-LC (American Library Association and Library of Congress) Russian romanization system. For more information, visit: https://en.wikipedia.org/wiki/ALA-LC_romanization_for_Russian and https://www.loc.gov/catdir/cpso/romanization/russian.pdf Inheritance System.Object Russian.AlaLc Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class AlaLc : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source AlaLc() Instantiates a copy of the system to process romanizations. Declaration public AlaLc() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs ALA-LC Russian romanization on the given text. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs ALA-LC Russian romanization on the given text. Supports providing a specific nativeCulture to process with, as long as the country code is ru . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Russian.BgnPcgn.html": {
    "href": "api/Romanization.Russian.BgnPcgn.html",
    "title": "Class Russian.BgnPcgn | Romanization.NET",
    "keywords": "Class Russian.BgnPcgn The BGN/PCGN system of romanization for Russian. It was developed by the Unites States Board on Geographic Names and the Permanent Committee on Geographical Names for British Official Use, and is designed to be easier for anglophones to pronounce. For more information, visit: https://en.wikipedia.org/wiki/BGN/PCGN_romanization_of_Russian Inheritance System.Object Russian.BgnPcgn Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class BgnPcgn : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source BgnPcgn() Instantiates a copy of the system to process romanizations. Declaration public BgnPcgn() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs romanization according to the BGN/PCGN system on the given text, using digraphs. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs romanization according to the BGN/PCGN system on the given text. Supports providing a specific nativeCulture to process with, as long as the country code is ru . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. | Improve this Doc View Source Process(String, Boolean) Performs romanization according to the BGN/PCGN system on the given text. Declaration public string Process(string text, bool useDigraphs) Parameters Type Name Description System.String text The text to romanize. System.Boolean useDigraphs Whether or not to insert special digraph combinations with interpunct characters (eg. шч -> sh·ch ). Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, Boolean, CultureInfo) Performs romanization according to the BGN/PCGN system on the given text. Supports providing a specific culture to process with, as long as the country code is ru . Declaration public string Process(string text, bool useDigraphs, CultureInfo culture) Parameters Type Name Description System.String text The text to romanize. System.Boolean useDigraphs Whether or not to insert special digraph combinations with interpunct characters (eg. шч -> sh·ch ). CultureInfo culture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException culture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Russian.Bs29791958.html": {
    "href": "api/Romanization.Russian.Bs29791958.html",
    "title": "Class Russian.Bs29791958 | Romanization.NET",
    "keywords": "Class Russian.Bs29791958 The British Standard 2979:1958 system of romanization for Russian. It is the main system of Oxford University Press, and was used by the British Library up until 1975. ALA-LC is now used instead. For more information, visit: https://en.wikipedia.org/wiki/Romanization_of_Russian#British_Standard Inheritance System.Object Russian.Bs29791958 Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class Bs29791958 : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source Bs29791958() Instantiates a copy of the system to process romanizations. Declaration public Bs29791958() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs romanization according to the British Standard 2979:1958 on the given text. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs romanization according to the British Standard 2979:1958 on the given text. Supports providing a specific nativeCulture to process with, as long as the country code is ru . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Russian.Gost16876711.html": {
    "href": "api/Romanization.Russian.Gost16876711.html",
    "title": "Class Russian.Gost16876711 | Romanization.NET",
    "keywords": "Class Russian.Gost16876711 The GOST 16876-71(1) (UNGEGN) romanization system of Russian. This system was recommended by the United Nations Group of Experts on Geographical Names. This is Table 1 of the GOST 16876-71 system with 1 Cyrillic to 1 Latin char, with diacritics. For more information, visit: https://en.wikipedia.org/wiki/GOST_16876-71 Inheritance System.Object Russian.Gost16876711 Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class Gost16876711 : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source Gost16876711() Instantiates a copy of the system to process romanizations. Declaration public Gost16876711() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs GOST 16876-71(1) romanization on Russian text. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs GOST 16876-71(1) romanization on Russian text. Supports providing a specific nativeCulture to process with, as long as the country code is ru . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Russian.Gost16876712.html": {
    "href": "api/Romanization.Russian.Gost16876712.html",
    "title": "Class Russian.Gost16876712 | Romanization.NET",
    "keywords": "Class Russian.Gost16876712 The GOST 16876-71(2) romanization system of Russian. This is Table 2 of the GOST 16876-71 system with 1 Cyrillic to potentially many Latin chars, without diacritics. For more information, visit: https://en.wikipedia.org/wiki/GOST_16876-71 Inheritance System.Object Russian.Gost16876712 Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class Gost16876712 : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source Gost16876712() Instantiates a copy of the system to process romanizations. Declaration public Gost16876712() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs GOST 16876-71(2) romanization on Russian text. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs GOST 16876-71(2) romanization on Russian text. Supports providing a specific nativeCulture to process with, as long as the country code is ru . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Russian.Gost7792000A.html": {
    "href": "api/Romanization.Russian.Gost7792000A.html",
    "title": "Class Russian.Gost7792000A | Romanization.NET",
    "keywords": "Class Russian.Gost7792000A The GOST 7.79-2000(A) romanization system of Russian. This is System A of the GOST 7.79-2000 system with 1 Cyrillic to 1 Latin char, with diacritics. Identical to ISO 9:1995 (different to ISO/R 9:1968). For more information, visit: https://en.wikipedia.org/wiki/GOST_7.79-2000 Inheritance System.Object Russian.Gost7792000A Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class Gost7792000A : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source Gost7792000A() Instantiates a copy of the system to process romanizations. Declaration public Gost7792000A() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs GOST 7.79-2000(A) romanization on Russian text. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs GOST 7.79-2000(A) romanization on Russian text. Supports providing a specific nativeCulture to process with, as long as the country code is ru . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Russian.Gost7792000B.html": {
    "href": "api/Romanization.Russian.Gost7792000B.html",
    "title": "Class Russian.Gost7792000B | Romanization.NET",
    "keywords": "Class Russian.Gost7792000B The GOST 7.79-2000(B) romanization system of Russian. This is System B of the GOST 7.79-2000 system with 1 Cyrillic to potentially many Latin chars, without diacritics. For more information, visit: https://en.wikipedia.org/wiki/GOST_7.79-2000 Inheritance System.Object Russian.Gost7792000B Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class Gost7792000B : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source Gost7792000B() Instantiates a copy of the system to process romanizations. Declaration public Gost7792000B() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs GOST 7.79-2000(B) romanization on Russian text. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs GOST 7.79-2000(B) romanization on Russian text. Supports providing a specific nativeCulture to process with, as long as the country code is ru . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Russian.html": {
    "href": "api/Romanization.Russian.html",
    "title": "Class Russian | Romanization.NET",
    "keywords": "Class Russian The class for romanizing Russian text. The reason for the abundance of systems is because there is no single, international, modern standard like there is for many other languages. Note that dictionary/learning-material Russian can include acute diacritics for marking stress. These are ignored by all systems here, and the diacritic will remain on the romanized version. See https://en.wikipedia.org/wiki/Russian_alphabet#Diacritics for more info. Inheritance System.Object Russian Namespace : Romanization Assembly : Romanization.NET.dll Syntax public static class Russian : object"
  },
  "api/Romanization.Russian.Icao9303.html": {
    "href": "api/Romanization.Russian.Icao9303.html",
    "title": "Class Russian.Icao9303 | Romanization.NET",
    "keywords": "Class Russian.Icao9303 The system from ICAO Doc 9303 \"Machine Readable Travel Documents, Part 3\". This is the standard for modern Russian passports, in 2021. For more information, visit: https://www.icao.int/publications/Documents/9303_p3_cons_en.pdf Inheritance System.Object Russian.Icao9303 Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class Icao9303 : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source Icao9303() Instantiates a copy of the system to process romanizations. Declaration public Icao9303() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs romanization according to ICAO Doc 9303 on the given text. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs romanization according to ICAO Doc 9303 on the given text. Supports providing a specific nativeCulture to process with, as long as the country code is ru . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Russian.IsoR9.html": {
    "href": "api/Romanization.Russian.IsoR9.html",
    "title": "Class Russian.IsoR9 | Romanization.NET",
    "keywords": "Class Russian.IsoR9 The ISO Recommendation No. 9 (ISO/R 9:1968) system of romanization, specialized for Russian. This transliteration table is designed to cover Bulgarian, Russian, Belarusian, Ukrainian, Serbo-Croatian and Macedonian in general, with regional specializations for certain languages. This is largely superceded by ISO 9 (GOST 7.79-2000(A)). For more information, visit: https://en.wikipedia.org/wiki/ISO_9#ISO/R_9 Inheritance System.Object Russian.IsoR9 Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class IsoR9 : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source IsoR9() Instantiates a copy of the system to process romanizations. Declaration public IsoR9() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs romanization according to ISO/R 9:1968 on the given text, with regional specializations applied for Russian. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs romanization according to ICAO Doc 9303 on the given text. Supports providing a specific nativeCulture to process with, as long as the country code is ru . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Russian.RoadSigns.html": {
    "href": "api/Romanization.Russian.RoadSigns.html",
    "title": "Class Russian.RoadSigns | Romanization.NET",
    "keywords": "Class Russian.RoadSigns The general road sign romanization system of Russian. This consists of Russian GOST R 52290-2004 (tables Г.4, Г.5) as well as GOST 10807-78 (tables 17, 18), historically. For more information, visit: https://en.wikipedia.org/wiki/Romanization_of_Russian#Street_and_road_signs Inheritance System.Object Russian.RoadSigns Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class RoadSigns : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source RoadSigns() Instantiates a copy of the system to process romanizations. Declaration public RoadSigns() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs general road sign romanization on Russian text. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs general road sign romanization on Russian text. Supports providing a specific nativeCulture to process with, as long as the country code is ru . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.Russian.Scholarly.html": {
    "href": "api/Romanization.Russian.Scholarly.html",
    "title": "Class Russian.Scholarly | Romanization.NET",
    "keywords": "Class Russian.Scholarly The International Scholarly System of romanization for Russian. For more information, visit: https://en.wikipedia.org/wiki/Scientific_transliteration_of_Cyrillic Inheritance System.Object Russian.Scholarly Implements IMultiInCultureSystem IRomanizationSystem Namespace : Romanization Assembly : Romanization.NET.dll Syntax public sealed class Scholarly : object, IMultiInCultureSystem, IRomanizationSystem Constructors | Improve this Doc View Source Scholarly() Instantiates a copy of the system to process romanizations. Declaration public Scholarly() Properties | Improve this Doc View Source DefaultCulture The default culture this system will go with for romanization if Process(String) is used. Declaration public CultureInfo DefaultCulture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Type The type of the system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Declaration public SystemType Type { get; } Property Value Type Description SystemType Methods | Improve this Doc View Source Process(String) Performs romanization according to the International Scholarly System on the given text. Declaration public string Process(string text) Parameters Type Name Description System.String text The text to romanize. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. | Improve this Doc View Source Process(String, CultureInfo) Performs romanization according to the International Scholarly System on the given text. Supports providing a specific nativeCulture to process with, as long as the country code is ru . Declaration public string Process(string text, CultureInfo nativeCulture) Parameters Type Name Description System.String text The text to romanize. CultureInfo nativeCulture The culture to use. Returns Type Description System.String A romanized version of the text, leaving unrecognized characters untouched. Exceptions Type Condition IrrelevantCultureException nativeCulture is irrelevant to the language/region. Implements IMultiInCultureSystem IRomanizationSystem"
  },
  "api/Romanization.SystemType.html": {
    "href": "api/Romanization.SystemType.html",
    "title": "Enum SystemType | Romanization.NET",
    "keywords": "Enum SystemType The type of a system - this is an important consideration depending on the purpose of romanizing the text. For more information, visit: https://en.wikipedia.org/wiki/Romanization#Methods Namespace : Romanization Assembly : Romanization.NET.dll Syntax public enum SystemType : int Fields Name Description PhonemicTranscription A phonemic transcription system, which intends to make the source text pronounceable to a reader of the target script. For more information, visit: https://en.wikipedia.org/wiki/Phonemic_orthography PhoneticTranscription A phonetic transcription system, which attempts to record the sounds of the language, not necessarily making it easy to pronounce for a reader. For more information, visit: https://en.wikipedia.org/wiki/Phonetic_transcription Transliteration A transliteration system, which is primarily concerned with maintaining an unambiguous map between the source language and the target script so it can be reconstructed from the romanized text later if need be. This does not mean they aren't viable as romanization methods, but for ease of pronunciation a transcription system is the better choice. Some languages only have transliteration systems. For more information, visit: https://en.wikipedia.org/wiki/Transliteration"
  },
  "articles/readingsSystems.html": {
    "href": "articles/readingsSystems.html",
    "title": "Readings Systems | Romanization.NET",
    "keywords": "Readings Systems A readings system is a romanization system implemented in such a way that instead of being limited to yielding just one romanization value for a character, can return every known reading for every single character. This is a package-specific detail, but it allows you to do with the readings how you please. If you'd rather just get a reading, these systems still support the basic Process function. If you're looking for the API Documentation for them, you can find it here ."
  },
  "articles/supported.html": {
    "href": "articles/supported.html",
    "title": "Supported Languages and Systems | Romanization.NET",
    "keywords": "Supported Languages and Systems The goal of Romanization.NET is to provide a simple, extensive way to romanize widely-used languages as accurately as possible. Below is a list of all supported languages and systems, with explanations of caveats and limitations if necessary. Languages are ordered lexicographically ascending. Chinese Hànyǔ Pīnyīn The Hànyǔ Pīnyīn system is considered a Readings System , and supports all Hànzì characters in the Unihan database . The reading types to use can be specified, but default to using all of them. The order in which readings are returned is as follows: Hànyǔ Pīnyīn Hànyǔ Pínlǜ - Hànyǔ Pīnyīn as it appeared in Xiàndài Hànyǔ Pínlǜ Cídiǎn XHC - Hànyǔ Pīnyīn as it appeared in Xiàndài Hànyǔ Cídiǎn Japanese Modified Hepburn This system is a revised version of the romanization system first published by James Curtis Hepburn, and the one in most widespread use in Japan. It only supports Kana ( Hiragana and Katakana ), not Kanji. See below for Kanji support. This supports syllabic n (ん), long consonants (sokuon, or っ), and long vowels (chōonpu (ー) only). Limitations In the Modified Hepburn system, certain pairs of subsequent vowels in the romanized result are to be combined into single long vowels , often indicated with a macron (aa => ā, for example). The issue is, according to the spec for the system, these combinations depend on whether the two vowels belong to different morphemes - this is not something known to the program. As a result, while some vowel combinations could be done (not all have this requirement), to remain consistent in output, no vowel combination is done. Kanji (Kun & On) Readings Kanji are effectively Japan's Hànzì, and share many of the same considerations and even symbols. While Kana are syllabaries (each character is one syllable, and therefore maps neatly to a distinct sound), Kanji are their own symbols that can be a variable number of syllables. To make things more complicated, each can have multiple readings - in both Kun'yomi and On'yomi . This is why this system is considered a Readings System for the purposes of this library, which means you can get every known reading from the Unihan database for each character. The two reading types supported are: Kun'yomi - often referred to as just Kun - the native reading On'yomi - often referred to as just On - the Sino-Japanese reading Additional Notes Because Kanji often appear alongside supplementary Kana, the system also has a small convenience function that romanizes both Kanji and Kana, using the system of your choice for Kana. Korean Revised Romanization of Korean The Revised Romanization of Korean system is the most commonly used, and does not make use of accents or macrons. The system has a few provisions for certain kinds of content, which change the romanization somewhat: Certain special pairs of Jamo are not combined in given names Whether or not aspiration is reflected in the romanization depends on whether or not the word is a noun Sometimes it can be helpful to hyphenate syllables, which occassionally makes a difference in disambiguating words with the same romanization (ga-eul vs. gae-ul) The library's implementation of this system supports all of these provisions as options that can be supplied to the function. Hanja => Hangeul Readings Hanja, like Kanji, came from China and share their symbols with Hànzì. As a result, this is also considered a Readings System as some Hanja have multiple possible readings. As with the other Hànzì-related characters, the supported Hanja are all from the Unihan database . Only one reading type is supported, which is the Hangeul equivalent pronunciation for each Hanja character. Additional Notes Because the goal of this package is, as the name suggests, romanization, the implementation also includes a function for first converting the Hanja to Hangeul, then romanizing the Hangeul using the system of your choice. Russian At the time of writing, Russian has no single international standard of romanization/transliteration. Instead different systems are used by different groups for different purposes. As a result, there are many systems all implemented with very similar transliterations. BGN/PCGN Developed jointly by the Unites States Board on Geographic Names and the Permanent Committee on Geographical Names for British Official Use, it is designed to be easier for anglophones to pronounce. Because of this, it's likely a solid choice for romanizing text specifically for English speakers (US/CA/UK audience). GOST 7.79-2000 System A / ISO 9 GOST 7.79-2000(A) focuses on mapping one Cyrillic character to one Latin character, potentially with diacritics. ISO 9:1995 is the current standard for Slavic transliteration from the ISO, and is based on ISO/R 9:1968. The two systems are functionally identical and in this library are combined into one, under the name of GOST 7.79-2000 System A. This is to retain consistency with the other GOST systems included, as it may be strange to have GOST 7.79-2000 System B but have A under a different name. GOST 7.79-2000 System B In contrast to the above, GOST 7.79-2000(B) focuses on mapping one Cyrillic character to potentially several Latin characters (eg. щ -> shh ), but without the use of diacritics. GOST 16876-71 Table 1 (UNGEGN) GOST 16876-71(1) focuses on mapping one Cyrillic character to one Latin character, potentially with diacritics. It was recommended by the United Nations Group of Experts on Geographical Names (UNGEGN) in 1987. GOST 16876-71 was most recently updated in 1980, and was abandoned in favour of GOST 7.79-2000 in 2002 by the Russian Federation. GOST 16876-71 Table 2 GOST 16876-71(2) is another table in GOST 16876-71, and focuses on mapping one Cyrillic character to potentially several Latin characters (eg. щ -> shh ), but without the use of diacritics. Scholarly/Scientific Transliteration The Scholarly transliteration system for Russian actually covers many slavic languages, with Russian being one of them. It tries to preserve pronunciation of the original characters while remaining unambiguous about it's transformations. ISO Recommendation No. 9 (ISO/R 9:1968) Similar to the scholarly system, ISO/R 9 was created 1954 and updated in 1968. It also supports many Slavic languages, and was the ISO's earliest adoption of scholarly transliteration. American Library Association and Library of Congress (ALA-LC) System This system was initially established in 1904, and remains largely unchanged since 1941. It's primary purpose is in US, Canadian, and British libraries. This system uses some diacritics and uses two-letter tie characters for some Cyrillic characters. British Standard 2979:1958 It is the main system of Oxford University Press, and was used by the British Library up until 1975. The ALA-LC system is now used by the British Library instead. ICAO Doc 9303 Created by the International Civil Aviation Organization, a UN agency, the document is designed to make travel documents machine-readable. It contains tables for transliteration to Latin characters from many alphabets, including Cyrillic. The system uses no diacritics whatsoever, only standard ASCII characters. The system was put into effect by the Russian government in 2013 for all citizen passports. General Road Signs This is the system generally used for romanization for road signs and the like. This originally followed GOST 10807-78 (tables 17, 18), but now follows GOST R 52290-2004 (tables Г.4, Г.5)."
  },
  "index.html": {
    "href": "index.html",
    "title": "Romanization.NET | Romanization.NET",
    "keywords": "Romanization.NET Welcome to Romanization.NET! This is a library for romanizing (converting to the latin alphabet) languages and writing systems that use different alphabets. Getting Started Below is a brief example of how you might use the library to romanize some Korean Hangeul text: using Romanization; ... string romanizedText = Korean.RevisedRomanization.Value.Process(\"한글\"); Console.WriteLine(romanizedText); // Outputs: han-geul Every language system is lazily initialized - this means only the romanization systems you use will be loaded. To see all available languages and systems as well as implementation details and further options, please visit the API Documentation . Installation Because it is available on NuGet.org , you can install it in any typical way you install any other NuGet package. If you'd rather install it manually, the package is also available on GitHub Packages . Command Line To get started, just use: dotnet add package Romanization.NET Or in the Package Manager Console: Install-Package Romanization.NET Visual Studio UI You can also install through Tools > NuGet Package Manager > Manage NuGet Packages for Solution... , and search Romanization.NET . More Information For more detailed information about the package and what it supports, please visit the Articles Section ."
  }
}